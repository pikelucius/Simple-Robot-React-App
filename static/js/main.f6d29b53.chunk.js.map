{"version":3,"sources":["components/Card.js","components/Cardlist.js","components/Searchbox.js","components/ErrorBoundary.js","components/Scroll.js","constants.js","containers/App.js","actions.js","reportWebVitals.js","reducers.js","serviceWorkerRegistration.js","index.js"],"names":["Card","name","email","id","className","src","width","height","alt","stringTruncate","str","length","dots","substring","Cardlist","robots","map","robot","i","replace","Searchbox","searchChange","type","placeholder","onChange","ErrorBoundary","props","state","hasError","error","info","this","setState","children","Component","Scroll","style","overflowY","border","CHANGE_SEARCH_FIELD","REQUEST_ROBOTS_PENDING","REQUEST_ROBOTS_SUCCESS","REQUEST_ROBOTS_FAILED","App","onRequestRobots","searchfield","onSearchChange","isPending","filteredRobots","filter","toLowerCase","includes","connect","searchRobots","requestRobots","dispatch","event","text","target","value","payload","a","fetch","response","json","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","initialStateSearch","initialStateRobots","isLocalhost","Boolean","window","location","hostname","match","registerValidSW","swUrl","config","navigator","serviceWorker","register","registration","onupdatefound","installingWorker","installing","onstatechange","controller","console","log","onUpdate","onSuccess","catch","logger","createLogger","rootReducers","combineReducers","action","Object","assign","store","createStore","applyMiddleware","thunkMiddleware","ReactDOM","render","StrictMode","document","getElementById","URL","process","href","origin","addEventListener","headers","contentType","get","status","indexOf","ready","unregister","reload","checkValidServiceWorker","serviceWorkerRegistration"],"mappings":"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","file":"static/js/main.f6d29b53.chunk.js","sourcesContent":["import React from 'react';\r\n\r\n\r\nconst Card = ({ name, email, id }) => {\r\n    return (\r\n        <div className=\"tc bg-light-green dib br3 ma2 grow bw2 shadow-5\">\r\n            <img src={`https://robohash.org/${id}`} width=\"200\" height=\"200\" alt=\"robots\"/>\r\n            \r\n            <div>\r\n                <h2>{name}</h2>\r\n                <p>{email}</p>\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Card\r\n","import React from 'react';\r\nimport Card from './Card';\r\n\r\n//function outside of the Card\r\nconst stringTruncate = (str, length) => {\r\n    const dots = str.length > length ? '...' : '';\r\n    return str.substring(0, length)+dots;\r\n  }\r\n  \r\nexport default function Cardlist({ robots }) {\r\n    return (\r\n        <div>\r\n            {\r\n                robots.map((robot, i) => {\r\n                   return <Card key={i} name={stringTruncate(robots[i].name.replace(/\\s/g, \"\"), 12)} email={robots[i].email} id={robots[i].id} />\r\n                } )\r\n            }\r\n        </div>\r\n    )\r\n}\r\n","import React from 'react';\r\n\r\nconst Searchbox = ({ searchChange }) => {\r\n    return (\r\n        <div className='pa2'>\r\n            <label>\r\n                label\r\n            <input\r\n                className='pa3 ba b--green bg-lightest-blue'\r\n                type=\"text\" \r\n                placeholder='Search robots'\r\n                onChange={searchChange} \r\n            /></label>\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default Searchbox;\r\n","import React, { Component } from 'react';\r\n\r\nclass ErrorBoundary extends Component {\r\n    constructor(props){\r\n        super(props)\r\n        this.state = {\r\n            hasError: false\r\n        }\r\n    }\r\n\r\n    componentDidCatch(error, info) {\r\n        this.setState({ hasError: true })\r\n    }\r\n\r\n    render() {\r\n        if(this.state.hasError) {\r\n            return <h1>Ooops. This is not good</h1>\r\n        }\r\n        return this.props.children\r\n    }\r\n}\r\n\r\nexport default ErrorBoundary;\r\n","import React from 'react';\r\n\r\nconst Scroll = (props) => {\r\n    return (\r\n        <div style={{overflowY: 'scroll', border: '1px solid black', height: '500px'}}>\r\n            {props.children}\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default Scroll;\r\n","export const CHANGE_SEARCH_FIELD = 'CHANGE_SEARCH_FIELD';\r\n\r\nexport const REQUEST_ROBOTS_PENDING = 'REQUEST_ROBOTS_PENDING';\r\nexport const REQUEST_ROBOTS_SUCCESS = 'REQUEST_ROBOTS_SUCCESS';\r\nexport const REQUEST_ROBOTS_FAILED = 'REQUEST_ROBOTS_FAILED';\r\n\r\n","import React, { Component } from 'react';\r\nimport { connect } from 'react-redux';\r\n\r\n\r\nimport Cardlist from '../components/Cardlist';\r\nimport Searchbox from '../components/Searchbox';\r\nimport ErrorBoundary from '../components/ErrorBoundary'\r\nimport Scroll from \"../components/Scroll\";\r\nimport './App.css';\r\n\r\nimport { setSearchField, requestRobots } from '../actions'\r\n\r\nconst mapStateToProps = state => {\r\n    return {\r\n        searchfield: state.searchRobots.searchfield,\r\n        robots: state.requestRobots.robots,\r\n        isPending: state.requestRobots.isPending,\r\n        error: state.requestRobots.error\r\n    }\r\n}\r\n\r\nconst mapDispatchToProps = (dispatch) => {\r\n    return {\r\n        onSearchChange: (event) => dispatch(setSearchField(event.target.value)),\r\n        onRequestRobots: () => dispatch(requestRobots())\r\n    }\r\n}\r\n\r\nclass App extends Component {\r\n\r\n componentDidMount(){\r\n    this.props.onRequestRobots()\r\n    }\r\n\r\n\r\n    render() {\r\n        const { searchfield, onSearchChange, robots, isPending } = this.props;\r\n        const filteredRobots = robots.filter(robot => {\r\n            return robot.name.toLowerCase().includes(searchfield.toLowerCase())\r\n        });\r\n        return isPending ? \r\n        (\r\n            <div className='tc'>\r\n                <h1 className='f2'>LOADING...</h1>\r\n            </div>\r\n        ) : \r\n\r\n        (\r\n            <div className='tc'>\r\n                <h1 className='f2'>ROBOTS</h1>\r\n                <Searchbox searchChange={onSearchChange} />\r\n                <Scroll>\r\n                    <ErrorBoundary>   \r\n                        <Cardlist robots={filteredRobots} />\r\n                    </ErrorBoundary>\r\n                </Scroll>\r\n                \r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(App);","import { \r\n    CHANGE_SEARCH_FIELD,\r\n    REQUEST_ROBOTS_PENDING,\r\n    REQUEST_ROBOTS_SUCCESS,\r\n    REQUEST_ROBOTS_FAILED\r\n} from './constants.js'\r\n\r\n\r\nexport const setSearchField = (text) => ({\r\n    type: CHANGE_SEARCH_FIELD,\r\n    payload: text\r\n})\r\n\r\nexport const requestRobots = () => async (dispatch) => {\r\n    dispatch({ type: REQUEST_ROBOTS_PENDING });\r\n    try {\r\n        const response = await fetch('https://jsonplaceholder.typicode.com/users');\r\n        const json = await response.json()\r\n        await dispatch({ type: REQUEST_ROBOTS_SUCCESS, payload: json })\r\n   } catch (err) {\r\n       dispatch({ type: REQUEST_ROBOTS_FAILED, payload: err })\r\n   }\r\n}\r\n","const reportWebVitals = (onPerfEntry) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import { \r\n    CHANGE_SEARCH_FIELD,\r\n    REQUEST_ROBOTS_PENDING,\r\n    REQUEST_ROBOTS_SUCCESS,\r\n    REQUEST_ROBOTS_FAILED\r\n} from './constants.js'\r\n\r\nconst initialStateSearch = {\r\n    searchfield : ''\r\n}\r\nexport const searchRobots = (state=initialStateSearch, action={}) => {\r\n    switch(action.type){\r\n        case CHANGE_SEARCH_FIELD:\r\n            return Object.assign({}, state, { searchfield: action.payload });\r\n        default: return state;\r\n    }\r\n}\r\n\r\nconst initialStateRobots = {\r\n    isPending: false,\r\n    robots: [],\r\n    error: ''\r\n}\r\n\r\nexport const requestRobots = (state=initialStateRobots, action={}) => {\r\n    switch(action.type) {\r\n        case REQUEST_ROBOTS_PENDING:\r\n            return Object.assign({}, state, { isPending: true })\r\n        case REQUEST_ROBOTS_SUCCESS:\r\n            return Object.assign({}, state, { robots: action.payload, isPending: false })\r\n        case REQUEST_ROBOTS_FAILED:\r\n            return Object.assign({}, state, { error: action.payload, isPending: false })\r\n        default: return state;\r\n            \r\n    }\r\n}","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://cra.link/PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(/^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/)\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://cra.link/PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then((registration) => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://cra.link/PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch((error) => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then((response) => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then((registration) => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log('No internet connection found. App is running in offline mode.');\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then((registration) => {\n        registration.unregister();\n      })\n      .catch((error) => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport { Provider } from 'react-redux';\nimport { createStore, applyMiddleware, combineReducers } from 'redux'\nimport { createLogger } from 'redux-logger';\nimport thunkMiddleware from 'redux-thunk';\nimport './index.css';\nimport App from './containers/App';\nimport reportWebVitals from './reportWebVitals';\nimport 'tachyons'\nimport { searchRobots, requestRobots } from './reducers';\n\nimport * as serviceWorkerRegistration from './serviceWorkerRegistration';\n\n\nconst logger = createLogger();\nconst rootReducers = combineReducers({ searchRobots, requestRobots })\nconst store = createStore(rootReducers, applyMiddleware(thunkMiddleware, logger));\n\n\n\nReactDOM.render(\n  <React.StrictMode>\n    <Provider store={store} >\n      <App />\n    </Provider>\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://cra.link/PWA\nserviceWorkerRegistration.register();\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n\n"],"sourceRoot":""}